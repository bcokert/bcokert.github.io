<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Production on BrandonOkert.com</title>
    <link>http://brandonokert.com/tags/production/</link>
    <description>Recent content in Production on BrandonOkert.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Mar 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://brandonokert.com/tags/production/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scaling with Docker Part 2</title>
      <link>http://brandonokert.com/articles/scaling-with-docker-part-2/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://brandonokert.com/articles/scaling-with-docker-part-2/</guid>
      <description>This is the second in a two part blog about Scaling with Docker. In this part, we&amp;rsquo;ll take what we learned in Part 1 and use it to create a scalable and resilient service with Docker. While the previous part took a more conceptual route, this part will focus more on practical applications. At each stage we&amp;rsquo;ll update a set of scripts to automate building and deploying, and go through a few tests to get familiar with the results.</description>
    </item>
    
    <item>
      <title>Scaling with Docker Part 1</title>
      <link>http://brandonokert.com/articles/scaling-with-docker-part-1/</link>
      <pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://brandonokert.com/articles/scaling-with-docker-part-1/</guid>
      <description>This is the first in a two part post about Scaling with Docker. In Part 1, we&amp;rsquo;ll focus on getting started with Docker from a scaling perspective. For the most part this will be an intro to Docker, so if you&amp;rsquo;re already experienced using mutli-container hosts, docker networks, volume containers, monitoring tools, and management scripts, feel free to skim this part. In Part 2, we&amp;rsquo;ll use the fundamentals from Part 1 to organize scalable multi-host systems, then show where to start to take that to very large scale applications.</description>
    </item>
    
  </channel>
</rss>