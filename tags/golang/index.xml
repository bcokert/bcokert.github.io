<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on BrandonOkert.com</title>
    <link>http://brandonokert.com/tags/golang/</link>
    <description>Recent content in Golang on BrandonOkert.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Apr 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://brandonokert.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Json Management Patterns In Go</title>
      <link>http://brandonokert.com/articles/json-management-patterns-in-go/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://brandonokert.com/articles/json-management-patterns-in-go/</guid>
      <description>Managing Json in Go is not a trivial problem. There are many examples out there of how to decode a simple json document into a struct, but few that answer the questions that inevitably come up:
 How do I provide defaults for fields? How do I make a field optional? How do I avoid using defaults for certain fields (eg: a user id)? How do I prevent pointer maintenance issues down the road?</description>
    </item>
    
  </channel>
</rss>